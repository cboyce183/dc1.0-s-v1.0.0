module.exports = {
  "this": "questo",
  "and": "e",
  "of": "di",
  "if": "se",
  "variable": "variabile",
  "variables": "variabili",
  "executes": "esegue",
  "variable_declarator_1": "è assegnata(o) a",
  "variable_declarator_2": "dichiarato(a) ma non inizializzato(a)",
  "if_statement_1": "o se no",
  "if_statement_2": "se no, nel caso in cui nessuna delle condizioni di cui sopra sia soddisfatta",
  "if_statement_3": "si risolve come vero, esegue:",
  "for_statement_1": "mentre",
  "for_statement_2": "è vero",
  "for_in_statement_1":"per ogni elemento in",
  "while_statement_1": "mentre",
  "while_statement_2": "è vero",
  "new_expression": "una nuova istanziazione della classe",
  "conditional_expression_1": "Espressione ternaria che recensioni se",
  "conditional_expression_2": "è vero:\n se lo è, ritorna",
  "conditional_expression_3": "altrimenti: ritorna",
  "logical_expression_1": "Valore booleano di",
  "logical_expression_2": "E",
  "logical_expression_3": "O",
  "function_expression_1": "Una funzione",
  "function_expression_2": "che prende",
  "function_expression_3": "come argomenti",
  "function_expression_4": "che quando è invocata",
  "call_expression_1": "il risultato di",
  "call_expression_2": "chiamata usando",
  "call_expression_3": "come argomenti",
  "function_declaration_1": "Dichiarazione di una funzione chiamata",
  "function_declaration_2": "che prende",
  "function_declaration_3": "come argomenti, che quando è invocata",
  "break_statement_1": "interrompe il ciclo esterno",
  "continue_statement": "interrompe l'iterazione corrente e continua con la successiva",
  "arrow_function_expression_1": "una funzioni a freccia che prende",
  "arrow_function_expression_2": "come argomenti, che quando è invocata ritorna",
  "arrow_function_expression_3": "come argomenti, che quando è invocata",
  "arrow_function_expression_4": "sensa argomenti, che quando è invocata",
  "return_statement": "ritorna",
  "array_expression_1": "che contiene",
  "array_expression_2": "un array di",
  "array_expression_3": "elementi",
  "object_expression_1": "un oggetto di coppie chiave:valore di",
  "class_declaration_1": "dichiarazzione di una classe chiamata",
  "class_body_1": "che contiene",
  "class_body_2": "metodo(i)",
  "method_definition_1": "un costruttore che è",
  "method_definition_2": "un metodo chiamato",
  "method_definition_3": "che è",
  "member_expression_1": "propietà",
  "update_expression_1": "incrementato(a) di 1",
  "update_expression_2": "diminuito(a) di 1",
  "switch_statement": "dichiarazione switch: valuta l'espressione",
  "switch_case_1": "se nessuno dei casi precedenti corrisponde all'espressione, viene eseguito quanto segue:",
  "switch_case_2": "Se l'espressione è valutata a",
  "unary_expresion_1": "l'opposto del valore booleano di",
  "unary_expresion_2": "negativo",
  "unary_expresion_3": "il bitwise opposto di",
  "unary_expresion_4": "il tipo di",
  "unary_expresion_5": "come Stringa",
  "unary_expresion_6": "cancela",
  "unary_expresion_7": "niente",
  binary_expression_1: 'piú',
  binary_expression_2: 'meno',
  binary_expression_3: 'per',
  binary_expression_4: 'alla potenza di',
  binary_expression_5: 'diviso per',
  binary_expression_6_1: 'la operazione bitwise E di',
  binary_expression_6_2: 'la operazione bitwise O di',
  binary_expression_6_3: 'la operazione bitwise XOR di',
  binary_representation_of: 'la rappresentazione binaria di',
  binary_expression_7: 'bits a la destra e riempito(a) di zeri alla sinistra',
  shifted: 'spostato(a)',
  boolean_value_of: 'il valore booleano di',
  is_less_than: 'è minore di',
  is_less_than_or_eql: 'è minore o uguale di',
  is_greater_than: 'è maggiore di',
  is_greater_than_or_eql: 'è maggiore o uguale di',
  not_equal: 'non è uguale a',
  not_deeply_equal: 'non è profondamente uguale a',
  is_equal: 'è uguale a',
  is_deeply_equal: 'è profondamente uguale a',
  boolean_of_if: 'il valore booleano di se',
  constructor: 'è stato(a) costruito(a) dal prototipo di',
  remainder: 'il remanente di',
  divided: 'diviso(a) per',
  assignment_expression_1: 'se stesso(a) piú',
  assignment_expression_2: 'se stesso(a) meno',
  assignment_expression_3: 'se stesso(a) per',
  assignment_expression_4: 'se stesso(a) alla potenza di',
  assignment_expression_5: 'se stesso(a) diviso per',
  assignment_expression_6: 'il rimanente della divisione di se stesso(a) per',
  assignment_expression_7: 'se stesso(a) spostato(a) in bitwise alla sinistra per',
  assignment_expression_8: 'se stesso(a) spostato(a) in bitwise alla destra per',
  assignment_expression_9: 'se stesso(a) riempito(a) di zeri alla sinistra e spostato(a) in bitwise alla destra per',
  assignment_expression_10: 'il bitwise E di se stesso(a) e',
  assignment_expression_11: 'il bitwise XOR di se stesso(a) e',
  assignment_expression_12: 'il bitwise O di se stesso(a) e',
  final: 'è assegnato(a) a'
}
