module.exports = {
  "this": "this",
  "and": "and",
  "of": "of",
  "if": "if",
  "variable": "variable",
  "variables": "variables",
  "variable_declarator_1": "is assigned to",
  "variable_declarator_2": "declared but not initialized",
  "if_statement_1": "else if",
  "if_statement_2": "else, in the case none of the previous conditions are met",
  "if_statement_3": "resolves to true, executes",
  "for_statement_1": "while",
  "for_statement_2": "evaluates to true",
  "while_statement_1": "while",
  "while_statement_2": "evaluates to true",
  "conditional_expression_1": "Ternary expression which checks if",
  "conditional_expression_2": "is true: if it is, it returns",
  "conditional_expression_3": "otherwise: it returns",
  "logical_expression_1": "boolean of",
  "logical_expression_2": "AND",
  "logical_expression_3": "OR",
  "function_expression_1": "a function",
  "function_expression_2": "that takes",
  "function_expression_3": "as arguments",
  "function_expression_4": "which when called",
  "call_expression_1": "the output of",
  "call_expression_2": "called using",
  "call_expression_3": "as arguments",
  "function_declaration_1": "Declaration of a function named",
  "function_declaration_2": "that takes",
  "function_declaration_3": "as arguments, which when called",
  "arrow_function_expression_1": "an arrow function that takes",
  "arrow_function_expression_2": "as arguments, which when called returns",
  "arrow_function_expression_3": "as arguments, which when called",
  "return_statement": "returns",
  "array_expression_1": "containing",
  "array_expression_2": "an array of",
  "array_expression_3": "elements",
  "object_expression_1": "an object of key:value pairs of",
  "class_declaration_1": "declaration of a class named",
  "class_body_1": "containing",
  "class_body_2": "method(s)",
  "method_definition_1": "a constructor which is",
  "method_definition_2": "a method named",
  "method_definition_3": "which is",
  "member_expression_1": "property",
  "update_expression_1": "is increased by 1",
  "update_expression_2": "is decreased by 1",
  "unary_expresion_1": "the opposite of the boolean of",
  "unary_expresion_2": "negative",
  "unary_expresion_3": "the bitwise opposite of",
  "unary_expresion_4": "the type of",
  "unary_expresion_5": "as a string",
  "unary_expresion_6": "deletes",
  "unary_expresion_7": "nothing",
  binary_expression_1: 'plus',
  binary_expression_2: 'minus',
  binary_expression_3: 'times',
  binary_expression_4: 'to the power of',
  binary_expression_5: 'divided by',
  binary_expression_6_1: 'the bitwise AND operation of',
  binary_expression_6_2: 'the bitwise AND operation of',
  binary_expression_6_3: 'the bitwise XOR operation of',
  binary_representation_of: 'the binary representation of',
  binary_expression_7: 'zero-fill-right shifted',
  shifted: 'shifted',
  boolean_value_of: 'the boolean value of',
  is_less_than: 'is less than',
  is_less_than_or_eql: 'is less than or equal to',
  is_greater_than: 'is greater than',
  is_greater_than_or_eql: 'is greater than or equal to',
  not_equal: 'is not equal to',
  not_deeply_equal: 'is not deeply equal to',
  is_equal: 'is equal to',
  is_deeply_equal: 'is deeply equal to',
  boolean_of_if: 'the boolean value of if',
  constructor: 'is constructed from the prototype of',
  remainder: 'the remainder of',
  divided: 'divided by',
  assignment_expression_1: 'itself plus',
  assignment_expression_2: 'itself minus',
  assignment_expression_3: 'itself times',
  assignment_expression_4: 'itself to the power of',
  assignment_expression_5: 'itself divided by',
  assignment_expression_6: 'the remainder of dividing itself by',
  assignment_expression_7: 'itself bitwise left shifted by',
  assignment_expression_8: 'itself bitwise right shifted by',
  assignment_expression_9: 'itself zero-fill bitwise right shifted by',
  assignment_expression_10: 'the bitwise AND of itself and',
  assignment_expression_11: 'the bitwise XOR of itself and',
  assignment_expression_12: 'the bitwise OR of itself and',
  final: 'is assigned to'
}