module.exports = {
  "this": "esto",
  "and": "y",
  "of": "de",
  "if": "si",
  "variable": "variable",
  "variables": "variables",
  "variable_declarator_1": "es asignado(a) a",
  "variable_declarator_2": "declarada(o) pero no inicializada(o)",
  "if_statement_1": "o si no",
  "if_statement_2": "si no, en caso de que no se cumpla ninguna de las condiciones anteriores",
  "if_statement_3": "se resuelve como verdadero, ejecuta:",
  "for_statement_1": "mientras",
  "for_statement_2": "es verdadero",
  "while_statement_1": "mientras",
  "while_statement_2": "es verdadero",
  "conditional_expression_1": "Expresion ternaria que revisa si",
  "conditional_expression_2": "es verdadero: si lo es, devuelve",
  "conditional_expression_3": "de otra forma: devuelve",
  "logical_expression_1": "valor booleano de",
  "logical_expression_2": "Y",
  "logical_expression_3": "O",
  "function_expression_1": "Una función",
  "function_expression_2": "que toma",
  "function_expression_3": "como argumentos",
  "function_expression_4": "que cuando es invocada",
  "call_expression_1": "el resultado de",
  "call_expression_2": "llamada utilizando",
  "call_expression_3": "como argumentos",
  "function_declaration_1": "Declaración de una función llamada",
  "function_declaration_2": "que toma",
  "function_declaration_3": "como argumentos, que cuando es invocada",
  "arrow_function_expression_1": "una función flecha que toma",
  "arrow_function_expression_2": "como argumentos, que cuando es invocada devuelve",
  "arrow_function_expression_3": "como argumentos, que cuando es invocada",
  "return_statement": "devuelve",
  "array_expression_1": "que contiene",
  "array_expression_2": "un array de",
  "array_expression_3": "elementos",
  "object_expression_1": "un objecto de parejas clave:valor de",
  "class_declaration_1": "declaración de una clase llamada",
  "class_body_1": "que contiene",
  "class_body_2": "metodo(s)",
  "method_definition_1": "un constructor que es",
  "method_definition_2": "un metodo llamado",
  "method_definition_3": "que es",
  "member_expression_1": "propiedad",
  "update_expression_1": "incrementado(a) por 1",
  "update_expression_2": "disminuido(a) por 1",
  "unary_expresion_1": "lo opuesto al valor booleano de",
  "unary_expresion_2": "negativo",
  "unary_expresion_3": "el bitwise opuesto de",
  "unary_expresion_4": "el tipo de",
  "unary_expresion_5": "en cadena literal",
  "unary_expresion_6": "borra",
  "unary_expresion_7": "nada",
  binary_expression_1: 'más',
  binary_expression_2: 'menos',
  binary_expression_3: 'por',
  binary_expression_4: 'a la potencia de',
  binary_expression_5: 'dividido(a) por',
  binary_expression_6_1: 'la operación bitwise Y de',
  binary_expression_6_2: 'la operación bitwise O de',
  binary_expression_6_3: 'la operación bitwise XOR de',
  binary_representation_of: 'la representación binaria de',
  binary_expression_7: 'bits a la derecha y relleno de zeros desde la izquierda',
  shifted: 'desplazado(a)',
  boolean_value_of: 'el valor booleano de',
  is_less_than: 'es menor que',
  is_less_than_or_eql: 'es menor o igual que',
  is_greater_than: 'es mayor que',
  is_greater_than_or_eql: 'es mayor o igual que',
  not_equal: 'no es igual a',
  not_deeply_equal: 'no es profundamente igual a',
  is_equal: 'es igual a',
  is_deeply_equal: 'es profundamente igual a',
  boolean_of_if: 'el valor booleano de si',
  constructor: 'fue construido(a) del prototipo de',
  remainder: 'el remanente de',
  divided: 'dividido(a) por',
  assignment_expression_1: 'sí mismo mas',
  assignment_expression_2: 'sí mismo menos',
  assignment_expression_3: 'sí mismo por',
  assignment_expression_4: 'sí mismo al poder de',
  assignment_expression_5: 'sí mismo dividido por',
  assignment_expression_6: 'el remanente de la divisioón de sí mismo por',
  assignment_expression_7: 'sí mismo desplazado(a) en bitwise hacia la izquierda por',
  assignment_expression_8: 'sí mismo desplazado(a) en bitwise hacia la derecha por',
  assignment_expression_9: 'sí mismo relleno de zeros por la izquierda y desplazado(a) en bitwise hacia la derecha por',
  assignment_expression_10: 'el bitwise Y de sí mismo y',
  assignment_expression_11: 'el bitwise XOR de sí mismo y',
  assignment_expression_12: 'el bitwise O de sí mismo y',
  final: 'es asignado(a) a'
}